<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="../docbook-html.xsl"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<article class="techreport">
  <title>Working With CodeGen</title>

  <articleinfo>
	<releaseinfo>$Revision$</releaseinfo>

	<pubdate>$Date$</pubdate>
  </articleinfo>

  <section id="CodeGen">
	<title>Building CodeGen</title>

	<para>Separate instructions are provided for Windows, and for Linux/Mac OS X.</para>

	<section>
	  <title>Windows</title>

	  <section>
		<title>Environment setup</title>

		<para>You will need to have the following installed:</para>

		<itemizedlist>
		  <listitem>
			<para>
			  <ulink url="../html/vcctk_installation.html">Microsoft Visual C++</ulink>
			</para>
		  </listitem>

		  <listitem>
			<para>
			  <ulink url="../html/expat_installation.html">Expat</ulink>
			</para>
		  </listitem>
		</itemizedlist>

		<para>The above links also provide the required set up of the environment variables since we
		  will be doing builds from the command-line, using Visual Studio's
		  <application>NMAKE</application>.</para>
	  </section>

	  <section>
		<title>Building</title>

		<para>In the CodeGen directory, type the following:</para>

		<informalexample>
		  <programlisting>nmake /nologo /f codegen.mak</programlisting>
		</informalexample>

		<para>This should produce an executable, <filename>CodeGen.exe</filename>. Test it by typing
			<userinput>CodeGen</userinput>. You should see output similar to this:</para>

		<informalexample>
		  <programlisting>SIL (R) Conceptual Model Code Generator (Nov  3 2004; 16:35:28)
Copyright (C) SIL 1999. All rights reserved.

Missing source file name.

Usage: cmcg [-p &lt;search path&gt;] [-t &lt;template dir&gt;] &lt;src&gt; &lt;sql&gt; &lt;sqh&gt;
   &lt;src&gt; : Conceptual model (.cm) file.
   &lt;sql&gt; : Output (.sql) file.
   &lt;sqh&gt; : Output (.sqh) file.
   -p&lt;path&gt; : specifies the search path for finding &lt;src&gt; and its class files.
   -t&lt;dir&gt;  : specifies the directory holding the template files.
   -v       : verbose output.
   -q       : quiet output.
</programlisting>
		</informalexample>
	  </section>
	</section>

	<section>
	  <title>Linux</title>

	  <para>To build CodeGen on Linux, gcc and expat need to be installed. CodeGen can then be built
		by typing <command>make</command> at a shell prompt.</para>
	</section>
  </section>

  <section>
	<title>Using CodeGen</title>

	<para>The purpose of CodeGen is to convert the conceptual model files into SQL statements. The
	  model files are XML, although they have a <filename>.cm</filename> suffix, and they reside in
	  the <filename>Models</filename> subdirectory.</para>

	<para>You will need to copy the CodeGen executable to the <filename>Src/Sql</filename>
	  directory, or (on Linux/Mac OS X) you can make a sumbolic link there.</para>

	<section>
	  <title>Conceptual Models</title>

	  <para>A conceptual model file contains a list of classes for a module. There are currently six
		modules. Each class contains a list of properties that the class has.</para>

	  <informalexample>
		<programlisting>&lt;class num="4" id="LexExampleSentence" abstract="false" base="CmObject"&gt;
  &lt;props&gt;
	&lt;basic num="1" id="Example" sig="MultiString"/&gt;
	&lt;rel num="2" id="SourceSegment" card="atomic" sig="TxtSegment"/&gt;
	&lt;owning num="3" id="Translations" card="col" sig="CmTranslation"/&gt;
  &lt;/props&gt;
&lt;/class&gt;</programlisting>
	  </informalexample>

	  <para>Properties come in several flavors: basic, owning and relational. Basic properties are
		built-in types, such as integer or string. Owning properties contain other objects, which
		are logically a part of the parent (owning) object. Relational properties are references to
		other objects which are logically not a part of the referencing object. Each property has a
		signature, which is the type of data that property is allowed to refer to. In the case of
		owning and relational properties, these also have a cardinality, which can be atomic,
		collection or sequence. Properties and classes also have a id number, which is used
		internally by the object-relational mapping.</para>
	</section>

	<section>
	  <title>Output from CodeGen</title>

	  <para>These classes do eventually become tables in the database. However, CodeGen doesn't
		generate SQL to define these tables directly. Instead, it generates
		<command>INSERT</command> statements that copy the class and property information into
		metadata tables called <filename>Class$</filename> and <filename>Field$</filename> that are
		used by the object-relational mapping. Triggers on these tables then define the tables
		dynamically.</para>

	  <para>The output from the <filename>LexExampleSentence</filename> model shown above lookslike
		this:</para>

	  <informalexample>
		<programlisting>insert into Class$ ([Id], [Mod], [Base], [Abstract], [Name])
	values(kclidLexExampleSentence, kmidLing, kclidCmObject, 0, 'LexExampleSentence')

insert into [Field$]
	([Id], [Type], [Class], [DstCls], [Name], [Custom], [CustomId], [Min], [Max], [Big])
	values(kflidLexExampleSentence_Example, kcptMultiString, kclidLexExampleSentence,
		null, 'Example',0,Null, null, null, null)
insert into [Field$]
	([Id], [Type], [Class], [DstCls], [Name], [Custom], [CustomId], [Min], [Max], [Big])
	values(kflidLexExampleSentence_SourceSegment, kcptReferenceAtom, kclidLexExampleSentence,
		kclidTxtSegment, 'SourceSegment',0,Null, null, null, null)
insert into [Field$]
	([Id], [Type], [Class], [DstCls], [Name], [Custom], [CustomId], [Min], [Max], [Big])
	values(kflidLexExampleSentence_Translations, kcptOwningCollection, kclidLexExampleSentence,
		kclidCmTranslation, 'Translations',0,Null, null, null, null)</programlisting>
	  </informalexample>

	  <para>CodeGen also produces a C/C++ header file with a suffix of <filename>.sqh</filename>
		that <filename>#define</filename>s symbolic identifiers corresponding to the raw id numbers
		that appear in the model files. These identifiers are then used in all other SQL code
		instead of numbers.</para>
	</section>

	<section>
	  <title>Further Output</title>

	  <para>Although CodeGen itself doesn't produce any other output, the code generation process as
		a whole does. The output from CodeGen, together with a large amount of hand-written SQL code
		from the <filename>Procedures</filename> subdirectory, is passed through the C/C++
		pre-processor. This serves two purposes: it allows a variety of files to be combined into a
		single output file using <filename>#include</filename> statements, and it does the work of
		substituting symbolic identifiers with real numbers.</para>

	  <para>Preprocessing is done on a module-by-module basis, and then the final output file is
		produced by concatenating the module outputs together.</para>

	  <para>The code generation process can be performed with a single command,
		  <filename>Scripts\build.bat</filename> (Windows) or <filename>Scripts/build.sh</filename>
		(Unix). It is possible to perform all the steps using <command>make</command>, but the
		execution is so quick that the brute-force approach of a script is perfectly acceptable, and
		simpler to maintain.</para>

	  <para>The final output is a file called <filename>NewLangProj.sql</filename> in the
		  <filename>Output</filename> subdirectory. It is designed to be submitted to the database
		in batch form, and sets up an empty database ready to receive data.</para>
	</section>
  </section>
</article>
